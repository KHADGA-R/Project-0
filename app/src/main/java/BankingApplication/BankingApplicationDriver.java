/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BankingApplication;

import BankingApplication.daos.*;
import BankingApplication.models.Account;
import BankingApplication.models.Customer;
import BankingApplication.models.Type;
import BankingApplication.service.EmployeeService;
import BankingApplication.utils.ConnectionUtil;
import io.javalin.Javalin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class BankingApplicationDriver {

    public static void main(String[] args) {

/*
        try {
            Connection conn = ConnectionUtil.getConnection();
            System.out.println(conn.getMetaData().getDriverName());
        } catch (SQLException e) {
            e.printStackTrace();
*/

        // EmployeeDao employeeDao = new EmployeeDaoImpl();
        /*
        Customer c = new Customer(Type.SAVING, "Klaus", "Balf", "781-567-0100", "superpass!");

        boolean success = employeeDao.createCustomer(c);
        System.out.println(success);
        */

        //      System.out.println(employeeDao.getCustomerById(3));

  /*      List<Customer> customer = employeeDao.getAllCustomer();
        System.out.println(customer);
        for(Customer c : customer){
            System.out.println(c);
        }

        }
   */
   /*     AdminDao adminDao = new AdminDaoImpl();

        //Customer c = new Customer(Type.CHECKING, "Krishav", "Parajuli", "981-567-9990", "newPass@11");

        String sql = "update customer set password = 'newPass@11' where id = 1";
        try (Connection conn = ConnectionUtil.getConnection();
             Statement s = conn.createStatement();) {


            int rowsAffected = s.executeUpdate(sql);

            if (rowsAffected == 1) {
                System.out.println("Updated");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    */
        Javalin app = Javalin.create().start();

        app.get("/", ctx -> ctx.result("Hellow World"));

        EmployeeService employeeService = new EmployeeService();
        app.get("/customer", ctx -> {
           List<Customer>customer = employeeService.getAllCustomer();

           ctx.json(customer);

        });

        app.get("/customer/{id}", ctx -> {
            String idParam = ctx.pathParam("id");
            int id = Integer.parseInt(idParam);
            Customer customer = employeeService.getCustomerById(id);
            ctx.json(customer);

        });

        app.post("/customer", ctx -> {
            Customer newCustomer = ctx.bodyAsClass(Customer.class);

            boolean success = employeeService.createCustomer(newCustomer);

            if(success) {
                ctx.status(201);
            }else {
                ctx.status(400);
            }
        });

        app.delete("/customer", ctx -> ctx.status(405));


    }
}






